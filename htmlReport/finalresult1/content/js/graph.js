/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 100.0, "minX": 0.0, "maxY": 3870.0, "series": [{"data": [[0.0, 207.0], [0.1, 209.0], [0.2, 209.0], [0.3, 210.0], [0.4, 210.0], [0.5, 210.0], [0.6, 211.0], [0.7, 211.0], [0.8, 211.0], [0.9, 211.0], [1.0, 211.0], [1.1, 212.0], [1.2, 212.0], [1.3, 212.0], [1.4, 212.0], [1.5, 212.0], [1.6, 213.0], [1.7, 213.0], [1.8, 213.0], [1.9, 213.0], [2.0, 213.0], [2.1, 213.0], [2.2, 213.0], [2.3, 213.0], [2.4, 213.0], [2.5, 213.0], [2.6, 213.0], [2.7, 214.0], [2.8, 214.0], [2.9, 214.0], [3.0, 214.0], [3.1, 214.0], [3.2, 214.0], [3.3, 214.0], [3.4, 214.0], [3.5, 214.0], [3.6, 215.0], [3.7, 215.0], [3.8, 215.0], [3.9, 215.0], [4.0, 215.0], [4.1, 215.0], [4.2, 215.0], [4.3, 215.0], [4.4, 215.0], [4.5, 215.0], [4.6, 215.0], [4.7, 216.0], [4.8, 216.0], [4.9, 216.0], [5.0, 216.0], [5.1, 216.0], [5.2, 216.0], [5.3, 216.0], [5.4, 217.0], [5.5, 217.0], [5.6, 217.0], [5.7, 217.0], [5.8, 217.0], [5.9, 217.0], [6.0, 217.0], [6.1, 217.0], [6.2, 217.0], [6.3, 217.0], [6.4, 217.0], [6.5, 218.0], [6.6, 218.0], [6.7, 218.0], [6.8, 218.0], [6.9, 218.0], [7.0, 218.0], [7.1, 218.0], [7.2, 219.0], [7.3, 219.0], [7.4, 219.0], [7.5, 219.0], [7.6, 219.0], [7.7, 219.0], [7.8, 219.0], [7.9, 219.0], [8.0, 219.0], [8.1, 219.0], [8.2, 219.0], [8.3, 220.0], [8.4, 220.0], [8.5, 220.0], [8.6, 220.0], [8.7, 220.0], [8.8, 220.0], [8.9, 220.0], [9.0, 220.0], [9.1, 220.0], [9.2, 220.0], [9.3, 220.0], [9.4, 221.0], [9.5, 221.0], [9.6, 221.0], [9.7, 221.0], [9.8, 221.0], [9.9, 221.0], [10.0, 221.0], [10.1, 221.0], [10.2, 221.0], [10.3, 221.0], [10.4, 221.0], [10.5, 222.0], [10.6, 222.0], [10.7, 222.0], [10.8, 222.0], [10.9, 222.0], [11.0, 222.0], [11.1, 222.0], [11.2, 222.0], [11.3, 222.0], [11.4, 222.0], [11.5, 222.0], [11.6, 222.0], [11.7, 222.0], [11.8, 222.0], [11.9, 222.0], [12.0, 223.0], [12.1, 223.0], [12.2, 223.0], [12.3, 223.0], [12.4, 223.0], [12.5, 223.0], [12.6, 223.0], [12.7, 223.0], [12.8, 223.0], [12.9, 223.0], [13.0, 223.0], [13.1, 224.0], [13.2, 224.0], [13.3, 224.0], [13.4, 224.0], [13.5, 224.0], [13.6, 224.0], [13.7, 224.0], [13.8, 224.0], [13.9, 224.0], [14.0, 224.0], [14.1, 224.0], [14.2, 224.0], [14.3, 224.0], [14.4, 224.0], [14.5, 225.0], [14.6, 225.0], [14.7, 225.0], [14.8, 225.0], [14.9, 225.0], [15.0, 225.0], [15.1, 225.0], [15.2, 225.0], [15.3, 225.0], [15.4, 225.0], [15.5, 225.0], [15.6, 225.0], [15.7, 225.0], [15.8, 226.0], [15.9, 226.0], [16.0, 226.0], [16.1, 226.0], [16.2, 226.0], [16.3, 226.0], [16.4, 226.0], [16.5, 226.0], [16.6, 226.0], [16.7, 226.0], [16.8, 226.0], [16.9, 226.0], [17.0, 226.0], [17.1, 226.0], [17.2, 227.0], [17.3, 227.0], [17.4, 227.0], [17.5, 227.0], [17.6, 227.0], [17.7, 227.0], [17.8, 227.0], [17.9, 227.0], [18.0, 227.0], [18.1, 227.0], [18.2, 227.0], [18.3, 227.0], [18.4, 227.0], [18.5, 227.0], [18.6, 227.0], [18.7, 227.0], [18.8, 227.0], [18.9, 228.0], [19.0, 228.0], [19.1, 228.0], [19.2, 228.0], [19.3, 228.0], [19.4, 228.0], [19.5, 228.0], [19.6, 228.0], [19.7, 228.0], [19.8, 228.0], [19.9, 228.0], [20.0, 228.0], [20.1, 229.0], [20.2, 229.0], [20.3, 229.0], [20.4, 229.0], [20.5, 229.0], [20.6, 229.0], [20.7, 229.0], [20.8, 229.0], [20.9, 229.0], [21.0, 229.0], [21.1, 229.0], [21.2, 229.0], [21.3, 229.0], [21.4, 229.0], [21.5, 229.0], [21.6, 229.0], [21.7, 229.0], [21.8, 229.0], [21.9, 229.0], [22.0, 229.0], [22.1, 230.0], [22.2, 230.0], [22.3, 230.0], [22.4, 230.0], [22.5, 230.0], [22.6, 230.0], [22.7, 230.0], [22.8, 230.0], [22.9, 230.0], [23.0, 230.0], [23.1, 230.0], [23.2, 230.0], [23.3, 230.0], [23.4, 230.0], [23.5, 230.0], [23.6, 230.0], [23.7, 230.0], [23.8, 230.0], [23.9, 230.0], [24.0, 230.0], [24.1, 231.0], [24.2, 231.0], [24.3, 231.0], [24.4, 231.0], [24.5, 231.0], [24.6, 231.0], [24.7, 231.0], [24.8, 231.0], [24.9, 231.0], [25.0, 231.0], [25.1, 231.0], [25.2, 231.0], [25.3, 231.0], [25.4, 231.0], [25.5, 231.0], [25.6, 231.0], [25.7, 231.0], [25.8, 232.0], [25.9, 232.0], [26.0, 232.0], [26.1, 232.0], [26.2, 232.0], [26.3, 232.0], [26.4, 232.0], [26.5, 232.0], [26.6, 232.0], [26.7, 232.0], [26.8, 232.0], [26.9, 232.0], [27.0, 232.0], [27.1, 232.0], [27.2, 232.0], [27.3, 232.0], [27.4, 232.0], [27.5, 232.0], [27.6, 233.0], [27.7, 233.0], [27.8, 233.0], [27.9, 233.0], [28.0, 233.0], [28.1, 233.0], [28.2, 233.0], [28.3, 233.0], [28.4, 233.0], [28.5, 233.0], [28.6, 233.0], [28.7, 233.0], [28.8, 233.0], [28.9, 233.0], [29.0, 233.0], [29.1, 233.0], [29.2, 234.0], [29.3, 234.0], [29.4, 234.0], [29.5, 234.0], [29.6, 234.0], [29.7, 234.0], [29.8, 234.0], [29.9, 234.0], [30.0, 234.0], [30.1, 234.0], [30.2, 234.0], [30.3, 234.0], [30.4, 234.0], [30.5, 234.0], [30.6, 235.0], [30.7, 235.0], [30.8, 235.0], [30.9, 235.0], [31.0, 235.0], [31.1, 235.0], [31.2, 235.0], [31.3, 235.0], [31.4, 235.0], [31.5, 235.0], [31.6, 235.0], [31.7, 235.0], [31.8, 235.0], [31.9, 235.0], [32.0, 235.0], [32.1, 236.0], [32.2, 236.0], [32.3, 236.0], [32.4, 236.0], [32.5, 236.0], [32.6, 236.0], [32.7, 236.0], [32.8, 236.0], [32.9, 236.0], [33.0, 236.0], [33.1, 236.0], [33.2, 236.0], [33.3, 236.0], [33.4, 236.0], [33.5, 236.0], [33.6, 237.0], [33.7, 237.0], [33.8, 237.0], [33.9, 237.0], [34.0, 237.0], [34.1, 237.0], [34.2, 237.0], [34.3, 237.0], [34.4, 237.0], [34.5, 237.0], [34.6, 237.0], [34.7, 237.0], [34.8, 238.0], [34.9, 238.0], [35.0, 238.0], [35.1, 238.0], [35.2, 238.0], [35.3, 238.0], [35.4, 238.0], [35.5, 238.0], [35.6, 238.0], [35.7, 238.0], [35.8, 238.0], [35.9, 239.0], [36.0, 239.0], [36.1, 239.0], [36.2, 239.0], [36.3, 239.0], [36.4, 239.0], [36.5, 239.0], [36.6, 239.0], [36.7, 239.0], [36.8, 239.0], [36.9, 239.0], [37.0, 239.0], [37.1, 239.0], [37.2, 239.0], [37.3, 239.0], [37.4, 239.0], [37.5, 240.0], [37.6, 240.0], [37.7, 240.0], [37.8, 240.0], [37.9, 240.0], [38.0, 240.0], [38.1, 240.0], [38.2, 240.0], [38.3, 240.0], [38.4, 240.0], [38.5, 240.0], [38.6, 240.0], [38.7, 240.0], [38.8, 240.0], [38.9, 240.0], [39.0, 241.0], [39.1, 241.0], [39.2, 241.0], [39.3, 241.0], [39.4, 241.0], [39.5, 241.0], [39.6, 241.0], [39.7, 241.0], [39.8, 241.0], [39.9, 241.0], [40.0, 241.0], [40.1, 241.0], [40.2, 241.0], [40.3, 241.0], [40.4, 241.0], [40.5, 241.0], [40.6, 241.0], [40.7, 242.0], [40.8, 242.0], [40.9, 242.0], [41.0, 242.0], [41.1, 242.0], [41.2, 242.0], [41.3, 242.0], [41.4, 242.0], [41.5, 242.0], [41.6, 242.0], [41.7, 242.0], [41.8, 242.0], [41.9, 242.0], [42.0, 242.0], [42.1, 242.0], [42.2, 242.0], [42.3, 242.0], [42.4, 243.0], [42.5, 243.0], [42.6, 243.0], [42.7, 243.0], [42.8, 243.0], [42.9, 243.0], [43.0, 243.0], [43.1, 243.0], [43.2, 243.0], [43.3, 243.0], [43.4, 243.0], [43.5, 243.0], [43.6, 243.0], [43.7, 243.0], [43.8, 243.0], [43.9, 243.0], [44.0, 243.0], [44.1, 244.0], [44.2, 244.0], [44.3, 244.0], [44.4, 244.0], [44.5, 244.0], [44.6, 244.0], [44.7, 244.0], [44.8, 244.0], [44.9, 244.0], [45.0, 244.0], [45.1, 244.0], [45.2, 244.0], [45.3, 244.0], [45.4, 244.0], [45.5, 244.0], [45.6, 244.0], [45.7, 244.0], [45.8, 244.0], [45.9, 244.0], [46.0, 244.0], [46.1, 244.0], [46.2, 245.0], [46.3, 245.0], [46.4, 245.0], [46.5, 245.0], [46.6, 245.0], [46.7, 245.0], [46.8, 245.0], [46.9, 245.0], [47.0, 245.0], [47.1, 245.0], [47.2, 245.0], [47.3, 245.0], [47.4, 245.0], [47.5, 245.0], [47.6, 245.0], [47.7, 245.0], [47.8, 245.0], [47.9, 246.0], [48.0, 246.0], [48.1, 246.0], [48.2, 246.0], [48.3, 246.0], [48.4, 246.0], [48.5, 246.0], [48.6, 246.0], [48.7, 246.0], [48.8, 246.0], [48.9, 246.0], [49.0, 246.0], [49.1, 246.0], [49.2, 247.0], [49.3, 247.0], [49.4, 247.0], [49.5, 247.0], [49.6, 247.0], [49.7, 247.0], [49.8, 247.0], [49.9, 247.0], [50.0, 247.0], [50.1, 247.0], [50.2, 247.0], [50.3, 247.0], [50.4, 247.0], [50.5, 247.0], [50.6, 248.0], [50.7, 248.0], [50.8, 248.0], [50.9, 248.0], [51.0, 248.0], [51.1, 248.0], [51.2, 248.0], [51.3, 248.0], [51.4, 248.0], [51.5, 248.0], [51.6, 248.0], [51.7, 249.0], [51.8, 249.0], [51.9, 249.0], [52.0, 249.0], [52.1, 249.0], [52.2, 249.0], [52.3, 249.0], [52.4, 249.0], [52.5, 249.0], [52.6, 249.0], [52.7, 249.0], [52.8, 250.0], [52.9, 250.0], [53.0, 250.0], [53.1, 250.0], [53.2, 250.0], [53.3, 250.0], [53.4, 250.0], [53.5, 250.0], [53.6, 250.0], [53.7, 250.0], [53.8, 250.0], [53.9, 251.0], [54.0, 251.0], [54.1, 251.0], [54.2, 251.0], [54.3, 251.0], [54.4, 251.0], [54.5, 251.0], [54.6, 251.0], [54.7, 251.0], [54.8, 252.0], [54.9, 252.0], [55.0, 252.0], [55.1, 252.0], [55.2, 252.0], [55.3, 252.0], [55.4, 252.0], [55.5, 252.0], [55.6, 253.0], [55.7, 253.0], [55.8, 253.0], [55.9, 253.0], [56.0, 253.0], [56.1, 253.0], [56.2, 253.0], [56.3, 253.0], [56.4, 253.0], [56.5, 254.0], [56.6, 254.0], [56.7, 254.0], [56.8, 254.0], [56.9, 254.0], [57.0, 254.0], [57.1, 254.0], [57.2, 255.0], [57.3, 255.0], [57.4, 255.0], [57.5, 255.0], [57.6, 255.0], [57.7, 256.0], [57.8, 256.0], [57.9, 256.0], [58.0, 256.0], [58.1, 256.0], [58.2, 257.0], [58.3, 257.0], [58.4, 257.0], [58.5, 257.0], [58.6, 257.0], [58.7, 258.0], [58.8, 258.0], [58.9, 258.0], [59.0, 258.0], [59.1, 258.0], [59.2, 259.0], [59.3, 259.0], [59.4, 259.0], [59.5, 259.0], [59.6, 259.0], [59.7, 260.0], [59.8, 260.0], [59.9, 260.0], [60.0, 260.0], [60.1, 261.0], [60.2, 261.0], [60.3, 261.0], [60.4, 262.0], [60.5, 262.0], [60.6, 262.0], [60.7, 263.0], [60.8, 263.0], [60.9, 263.0], [61.0, 263.0], [61.1, 264.0], [61.2, 264.0], [61.3, 265.0], [61.4, 266.0], [61.5, 266.0], [61.6, 267.0], [61.7, 267.0], [61.8, 268.0], [61.9, 269.0], [62.0, 270.0], [62.1, 270.0], [62.2, 270.0], [62.3, 271.0], [62.4, 272.0], [62.5, 273.0], [62.6, 274.0], [62.7, 275.0], [62.8, 275.0], [62.9, 276.0], [63.0, 276.0], [63.1, 277.0], [63.2, 277.0], [63.3, 277.0], [63.4, 278.0], [63.5, 279.0], [63.6, 279.0], [63.7, 280.0], [63.8, 281.0], [63.9, 282.0], [64.0, 284.0], [64.1, 284.0], [64.2, 285.0], [64.3, 287.0], [64.4, 289.0], [64.5, 291.0], [64.6, 292.0], [64.7, 294.0], [64.8, 294.0], [64.9, 295.0], [65.0, 297.0], [65.1, 298.0], [65.2, 298.0], [65.3, 299.0], [65.4, 301.0], [65.5, 301.0], [65.6, 302.0], [65.7, 303.0], [65.8, 303.0], [65.9, 303.0], [66.0, 304.0], [66.1, 305.0], [66.2, 307.0], [66.3, 308.0], [66.4, 310.0], [66.5, 311.0], [66.6, 312.0], [66.7, 313.0], [66.8, 314.0], [66.9, 315.0], [67.0, 315.0], [67.1, 317.0], [67.2, 317.0], [67.3, 319.0], [67.4, 321.0], [67.5, 322.0], [67.6, 323.0], [67.7, 324.0], [67.8, 325.0], [67.9, 326.0], [68.0, 329.0], [68.1, 333.0], [68.2, 336.0], [68.3, 344.0], [68.4, 377.0], [68.5, 389.0], [68.6, 399.0], [68.7, 462.0], [68.8, 464.0], [68.9, 464.0], [69.0, 465.0], [69.1, 466.0], [69.2, 467.0], [69.3, 469.0], [69.4, 470.0], [69.5, 471.0], [69.6, 472.0], [69.7, 472.0], [69.8, 473.0], [69.9, 474.0], [70.0, 475.0], [70.1, 476.0], [70.2, 477.0], [70.3, 478.0], [70.4, 478.0], [70.5, 478.0], [70.6, 479.0], [70.7, 479.0], [70.8, 480.0], [70.9, 480.0], [71.0, 481.0], [71.1, 481.0], [71.2, 482.0], [71.3, 483.0], [71.4, 483.0], [71.5, 484.0], [71.6, 484.0], [71.7, 485.0], [71.8, 485.0], [71.9, 485.0], [72.0, 485.0], [72.1, 486.0], [72.2, 487.0], [72.3, 487.0], [72.4, 487.0], [72.5, 488.0], [72.6, 488.0], [72.7, 489.0], [72.8, 489.0], [72.9, 490.0], [73.0, 490.0], [73.1, 492.0], [73.2, 492.0], [73.3, 492.0], [73.4, 493.0], [73.5, 493.0], [73.6, 493.0], [73.7, 493.0], [73.8, 494.0], [73.9, 494.0], [74.0, 495.0], [74.1, 495.0], [74.2, 495.0], [74.3, 495.0], [74.4, 496.0], [74.5, 497.0], [74.6, 497.0], [74.7, 498.0], [74.8, 498.0], [74.9, 498.0], [75.0, 499.0], [75.1, 499.0], [75.2, 500.0], [75.3, 500.0], [75.4, 501.0], [75.5, 501.0], [75.6, 502.0], [75.7, 502.0], [75.8, 502.0], [75.9, 502.0], [76.0, 503.0], [76.1, 503.0], [76.2, 503.0], [76.3, 503.0], [76.4, 504.0], [76.5, 504.0], [76.6, 504.0], [76.7, 505.0], [76.8, 505.0], [76.9, 505.0], [77.0, 505.0], [77.1, 506.0], [77.2, 506.0], [77.3, 506.0], [77.4, 507.0], [77.5, 507.0], [77.6, 507.0], [77.7, 508.0], [77.8, 508.0], [77.9, 508.0], [78.0, 509.0], [78.1, 509.0], [78.2, 509.0], [78.3, 509.0], [78.4, 509.0], [78.5, 510.0], [78.6, 510.0], [78.7, 510.0], [78.8, 511.0], [78.9, 511.0], [79.0, 512.0], [79.1, 512.0], [79.2, 512.0], [79.3, 513.0], [79.4, 513.0], [79.5, 513.0], [79.6, 514.0], [79.7, 514.0], [79.8, 514.0], [79.9, 515.0], [80.0, 515.0], [80.1, 515.0], [80.2, 516.0], [80.3, 516.0], [80.4, 517.0], [80.5, 517.0], [80.6, 518.0], [80.7, 519.0], [80.8, 519.0], [80.9, 520.0], [81.0, 520.0], [81.1, 520.0], [81.2, 521.0], [81.3, 521.0], [81.4, 522.0], [81.5, 523.0], [81.6, 523.0], [81.7, 524.0], [81.8, 524.0], [81.9, 524.0], [82.0, 525.0], [82.1, 526.0], [82.2, 527.0], [82.3, 527.0], [82.4, 528.0], [82.5, 528.0], [82.6, 529.0], [82.7, 530.0], [82.8, 531.0], [82.9, 532.0], [83.0, 533.0], [83.1, 533.0], [83.2, 534.0], [83.3, 534.0], [83.4, 535.0], [83.5, 535.0], [83.6, 537.0], [83.7, 538.0], [83.8, 538.0], [83.9, 539.0], [84.0, 540.0], [84.1, 541.0], [84.2, 542.0], [84.3, 542.0], [84.4, 544.0], [84.5, 545.0], [84.6, 546.0], [84.7, 546.0], [84.8, 548.0], [84.9, 548.0], [85.0, 549.0], [85.1, 550.0], [85.2, 551.0], [85.3, 553.0], [85.4, 553.0], [85.5, 554.0], [85.6, 555.0], [85.7, 555.0], [85.8, 556.0], [85.9, 558.0], [86.0, 559.0], [86.1, 560.0], [86.2, 560.0], [86.3, 561.0], [86.4, 562.0], [86.5, 563.0], [86.6, 565.0], [86.7, 566.0], [86.8, 567.0], [86.9, 569.0], [87.0, 570.0], [87.1, 571.0], [87.2, 572.0], [87.3, 573.0], [87.4, 574.0], [87.5, 575.0], [87.6, 576.0], [87.7, 577.0], [87.8, 578.0], [87.9, 579.0], [88.0, 583.0], [88.1, 584.0], [88.2, 586.0], [88.3, 587.0], [88.4, 590.0], [88.5, 591.0], [88.6, 592.0], [88.7, 593.0], [88.8, 596.0], [88.9, 598.0], [89.0, 600.0], [89.1, 601.0], [89.2, 602.0], [89.3, 605.0], [89.4, 607.0], [89.5, 608.0], [89.6, 609.0], [89.7, 613.0], [89.8, 620.0], [89.9, 622.0], [90.0, 629.0], [90.1, 634.0], [90.2, 656.0], [90.3, 719.0], [90.4, 733.0], [90.5, 747.0], [90.6, 761.0], [90.7, 767.0], [90.8, 771.0], [90.9, 776.0], [91.0, 781.0], [91.1, 785.0], [91.2, 790.0], [91.3, 799.0], [91.4, 803.0], [91.5, 809.0], [91.6, 813.0], [91.7, 817.0], [91.8, 820.0], [91.9, 833.0], [92.0, 836.0], [92.1, 844.0], [92.2, 852.0], [92.3, 858.0], [92.4, 865.0], [92.5, 874.0], [92.6, 882.0], [92.7, 896.0], [92.8, 933.0], [92.9, 1059.0], [93.0, 1098.0], [93.1, 1185.0], [93.2, 1208.0], [93.3, 1214.0], [93.4, 1218.0], [93.5, 1219.0], [93.6, 1220.0], [93.7, 1221.0], [93.8, 1223.0], [93.9, 1225.0], [94.0, 1226.0], [94.1, 1226.0], [94.2, 1229.0], [94.3, 1230.0], [94.4, 1231.0], [94.5, 1232.0], [94.6, 1233.0], [94.7, 1233.0], [94.8, 1234.0], [94.9, 1235.0], [95.0, 1237.0], [95.1, 1237.0], [95.2, 1238.0], [95.3, 1239.0], [95.4, 1239.0], [95.5, 1240.0], [95.6, 1242.0], [95.7, 1242.0], [95.8, 1243.0], [95.9, 1245.0], [96.0, 1246.0], [96.1, 1247.0], [96.2, 1249.0], [96.3, 1250.0], [96.4, 1252.0], [96.5, 1253.0], [96.6, 1254.0], [96.7, 1255.0], [96.8, 1257.0], [96.9, 1259.0], [97.0, 1259.0], [97.1, 1262.0], [97.2, 1265.0], [97.3, 1269.0], [97.4, 1274.0], [97.5, 1274.0], [97.6, 1288.0], [97.7, 1297.0], [97.8, 1313.0], [97.9, 1320.0], [98.0, 1480.0], [98.1, 1485.0], [98.2, 1490.0], [98.3, 1491.0], [98.4, 1509.0], [98.5, 1518.0], [98.6, 1524.0], [98.7, 1533.0], [98.8, 1542.0], [98.9, 1548.0], [99.0, 1560.0], [99.1, 1579.0], [99.2, 1594.0], [99.3, 1626.0], [99.4, 1752.0], [99.5, 1832.0], [99.6, 2103.0], [99.7, 2290.0], [99.8, 2352.0], [99.9, 2722.0], [100.0, 3512.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 100.0], [0.1, 100.0], [0.2, 101.0], [0.3, 101.0], [0.4, 101.0], [0.5, 101.0], [0.6, 101.0], [0.7, 101.0], [0.8, 101.0], [0.9, 101.0], [1.0, 102.0], [1.1, 102.0], [1.2, 102.0], [1.3, 102.0], [1.4, 102.0], [1.5, 102.0], [1.6, 102.0], [1.7, 102.0], [1.8, 102.0], [1.9, 102.0], [2.0, 102.0], [2.1, 102.0], [2.2, 102.0], [2.3, 102.0], [2.4, 102.0], [2.5, 102.0], [2.6, 102.0], [2.7, 102.0], [2.8, 102.0], [2.9, 103.0], [3.0, 103.0], [3.1, 103.0], [3.2, 103.0], [3.3, 103.0], [3.4, 103.0], [3.5, 103.0], [3.6, 103.0], [3.7, 103.0], [3.8, 103.0], [3.9, 103.0], [4.0, 103.0], [4.1, 103.0], [4.2, 103.0], [4.3, 103.0], [4.4, 103.0], [4.5, 103.0], [4.6, 103.0], [4.7, 103.0], [4.8, 103.0], [4.9, 103.0], [5.0, 103.0], [5.1, 103.0], [5.2, 103.0], [5.3, 104.0], [5.4, 104.0], [5.5, 104.0], [5.6, 104.0], [5.7, 104.0], [5.8, 104.0], [5.9, 104.0], [6.0, 104.0], [6.1, 104.0], [6.2, 104.0], [6.3, 104.0], [6.4, 104.0], [6.5, 104.0], [6.6, 104.0], [6.7, 104.0], [6.8, 104.0], [6.9, 104.0], [7.0, 104.0], [7.1, 104.0], [7.2, 104.0], [7.3, 104.0], [7.4, 104.0], [7.5, 104.0], [7.6, 104.0], [7.7, 104.0], [7.8, 104.0], [7.9, 105.0], [8.0, 105.0], [8.1, 105.0], [8.2, 105.0], [8.3, 105.0], [8.4, 105.0], [8.5, 105.0], [8.6, 105.0], [8.7, 105.0], [8.8, 105.0], [8.9, 105.0], [9.0, 105.0], [9.1, 105.0], [9.2, 105.0], [9.3, 105.0], [9.4, 105.0], [9.5, 105.0], [9.6, 105.0], [9.7, 105.0], [9.8, 105.0], [9.9, 105.0], [10.0, 106.0], [10.1, 106.0], [10.2, 106.0], [10.3, 106.0], [10.4, 106.0], [10.5, 106.0], [10.6, 106.0], [10.7, 106.0], [10.8, 106.0], [10.9, 106.0], [11.0, 106.0], [11.1, 106.0], [11.2, 106.0], [11.3, 106.0], [11.4, 106.0], [11.5, 106.0], [11.6, 106.0], [11.7, 106.0], [11.8, 106.0], [11.9, 106.0], [12.0, 106.0], [12.1, 106.0], [12.2, 106.0], [12.3, 106.0], [12.4, 106.0], [12.5, 106.0], [12.6, 106.0], [12.7, 106.0], [12.8, 107.0], [12.9, 107.0], [13.0, 107.0], [13.1, 107.0], [13.2, 107.0], [13.3, 107.0], [13.4, 107.0], [13.5, 107.0], [13.6, 107.0], [13.7, 107.0], [13.8, 107.0], [13.9, 107.0], [14.0, 107.0], [14.1, 107.0], [14.2, 107.0], [14.3, 107.0], [14.4, 107.0], [14.5, 107.0], [14.6, 107.0], [14.7, 107.0], [14.8, 107.0], [14.9, 107.0], [15.0, 107.0], [15.1, 107.0], [15.2, 107.0], [15.3, 107.0], [15.4, 107.0], [15.5, 107.0], [15.6, 107.0], [15.7, 108.0], [15.8, 108.0], [15.9, 108.0], [16.0, 108.0], [16.1, 108.0], [16.2, 108.0], [16.3, 108.0], [16.4, 108.0], [16.5, 108.0], [16.6, 108.0], [16.7, 108.0], [16.8, 108.0], [16.9, 108.0], [17.0, 108.0], [17.1, 108.0], [17.2, 108.0], [17.3, 108.0], [17.4, 108.0], [17.5, 108.0], [17.6, 108.0], [17.7, 108.0], [17.8, 108.0], [17.9, 108.0], [18.0, 108.0], [18.1, 108.0], [18.2, 108.0], [18.3, 108.0], [18.4, 108.0], [18.5, 108.0], [18.6, 108.0], [18.7, 108.0], [18.8, 108.0], [18.9, 108.0], [19.0, 108.0], [19.1, 108.0], [19.2, 108.0], [19.3, 108.0], [19.4, 108.0], [19.5, 108.0], [19.6, 108.0], [19.7, 108.0], [19.8, 108.0], [19.9, 108.0], [20.0, 108.0], [20.1, 108.0], [20.2, 108.0], [20.3, 109.0], [20.4, 109.0], [20.5, 109.0], [20.6, 109.0], [20.7, 109.0], [20.8, 109.0], [20.9, 109.0], [21.0, 109.0], [21.1, 109.0], [21.2, 109.0], [21.3, 109.0], [21.4, 109.0], [21.5, 109.0], [21.6, 109.0], [21.7, 109.0], [21.8, 109.0], [21.9, 109.0], [22.0, 109.0], [22.1, 109.0], [22.2, 109.0], [22.3, 109.0], [22.4, 109.0], [22.5, 109.0], [22.6, 109.0], [22.7, 109.0], [22.8, 109.0], [22.9, 109.0], [23.0, 109.0], [23.1, 109.0], [23.2, 109.0], [23.3, 109.0], [23.4, 109.0], [23.5, 109.0], [23.6, 109.0], [23.7, 109.0], [23.8, 109.0], [23.9, 109.0], [24.0, 109.0], [24.1, 109.0], [24.2, 109.0], [24.3, 109.0], [24.4, 110.0], [24.5, 110.0], [24.6, 110.0], [24.7, 110.0], [24.8, 110.0], [24.9, 110.0], [25.0, 110.0], [25.1, 110.0], [25.2, 110.0], [25.3, 110.0], [25.4, 110.0], [25.5, 110.0], [25.6, 110.0], [25.7, 110.0], [25.8, 110.0], [25.9, 110.0], [26.0, 110.0], [26.1, 110.0], [26.2, 110.0], [26.3, 110.0], [26.4, 110.0], [26.5, 110.0], [26.6, 110.0], [26.7, 110.0], [26.8, 110.0], [26.9, 110.0], [27.0, 110.0], [27.1, 110.0], [27.2, 110.0], [27.3, 110.0], [27.4, 110.0], [27.5, 110.0], [27.6, 110.0], [27.7, 110.0], [27.8, 110.0], [27.9, 110.0], [28.0, 111.0], [28.1, 111.0], [28.2, 111.0], [28.3, 111.0], [28.4, 111.0], [28.5, 111.0], [28.6, 111.0], [28.7, 111.0], [28.8, 111.0], [28.9, 111.0], [29.0, 111.0], [29.1, 111.0], [29.2, 111.0], [29.3, 111.0], [29.4, 111.0], [29.5, 111.0], [29.6, 111.0], [29.7, 111.0], [29.8, 111.0], [29.9, 111.0], [30.0, 111.0], [30.1, 111.0], [30.2, 111.0], [30.3, 111.0], [30.4, 111.0], [30.5, 111.0], [30.6, 111.0], [30.7, 111.0], [30.8, 111.0], [30.9, 111.0], [31.0, 111.0], [31.1, 111.0], [31.2, 111.0], [31.3, 111.0], [31.4, 111.0], [31.5, 111.0], [31.6, 111.0], [31.7, 111.0], [31.8, 111.0], [31.9, 111.0], [32.0, 111.0], [32.1, 112.0], [32.2, 112.0], [32.3, 112.0], [32.4, 112.0], [32.5, 112.0], [32.6, 112.0], [32.7, 112.0], [32.8, 112.0], [32.9, 112.0], [33.0, 112.0], [33.1, 112.0], [33.2, 112.0], [33.3, 112.0], [33.4, 112.0], [33.5, 112.0], [33.6, 112.0], [33.7, 112.0], [33.8, 112.0], [33.9, 112.0], [34.0, 112.0], [34.1, 112.0], [34.2, 112.0], [34.3, 112.0], [34.4, 112.0], [34.5, 112.0], [34.6, 112.0], [34.7, 112.0], [34.8, 112.0], [34.9, 112.0], [35.0, 112.0], [35.1, 112.0], [35.2, 112.0], [35.3, 112.0], [35.4, 112.0], [35.5, 112.0], [35.6, 112.0], [35.7, 112.0], [35.8, 112.0], [35.9, 112.0], [36.0, 112.0], [36.1, 112.0], [36.2, 112.0], [36.3, 112.0], [36.4, 112.0], [36.5, 112.0], [36.6, 112.0], [36.7, 112.0], [36.8, 112.0], [36.9, 113.0], [37.0, 113.0], [37.1, 113.0], [37.2, 113.0], [37.3, 113.0], [37.4, 113.0], [37.5, 113.0], [37.6, 113.0], [37.7, 113.0], [37.8, 113.0], [37.9, 113.0], [38.0, 113.0], [38.1, 113.0], [38.2, 113.0], [38.3, 113.0], [38.4, 113.0], [38.5, 113.0], [38.6, 113.0], [38.7, 113.0], [38.8, 113.0], [38.9, 113.0], [39.0, 113.0], [39.1, 113.0], [39.2, 113.0], [39.3, 113.0], [39.4, 113.0], [39.5, 113.0], [39.6, 113.0], [39.7, 113.0], [39.8, 113.0], [39.9, 113.0], [40.0, 113.0], [40.1, 113.0], [40.2, 113.0], [40.3, 113.0], [40.4, 113.0], [40.5, 113.0], [40.6, 113.0], [40.7, 113.0], [40.8, 113.0], [40.9, 113.0], [41.0, 113.0], [41.1, 113.0], [41.2, 113.0], [41.3, 113.0], [41.4, 114.0], [41.5, 114.0], [41.6, 114.0], [41.7, 114.0], [41.8, 114.0], [41.9, 114.0], [42.0, 114.0], [42.1, 114.0], [42.2, 114.0], [42.3, 114.0], [42.4, 114.0], [42.5, 114.0], [42.6, 114.0], [42.7, 114.0], [42.8, 114.0], [42.9, 114.0], [43.0, 114.0], [43.1, 114.0], [43.2, 114.0], [43.3, 114.0], [43.4, 114.0], [43.5, 114.0], [43.6, 114.0], [43.7, 114.0], [43.8, 114.0], [43.9, 114.0], [44.0, 114.0], [44.1, 114.0], [44.2, 114.0], [44.3, 115.0], [44.4, 115.0], [44.5, 115.0], [44.6, 115.0], [44.7, 115.0], [44.8, 115.0], [44.9, 115.0], [45.0, 115.0], [45.1, 115.0], [45.2, 115.0], [45.3, 115.0], [45.4, 115.0], [45.5, 115.0], [45.6, 115.0], [45.7, 115.0], [45.8, 115.0], [45.9, 115.0], [46.0, 115.0], [46.1, 115.0], [46.2, 115.0], [46.3, 115.0], [46.4, 115.0], [46.5, 115.0], [46.6, 115.0], [46.7, 115.0], [46.8, 115.0], [46.9, 115.0], [47.0, 115.0], [47.1, 115.0], [47.2, 115.0], [47.3, 115.0], [47.4, 115.0], [47.5, 115.0], [47.6, 115.0], [47.7, 116.0], [47.8, 116.0], [47.9, 116.0], [48.0, 116.0], [48.1, 116.0], [48.2, 116.0], [48.3, 116.0], [48.4, 116.0], [48.5, 116.0], [48.6, 116.0], [48.7, 116.0], [48.8, 116.0], [48.9, 116.0], [49.0, 116.0], [49.1, 116.0], [49.2, 116.0], [49.3, 116.0], [49.4, 116.0], [49.5, 116.0], [49.6, 116.0], [49.7, 116.0], [49.8, 116.0], [49.9, 116.0], [50.0, 116.0], [50.1, 116.0], [50.2, 116.0], [50.3, 116.0], [50.4, 116.0], [50.5, 116.0], [50.6, 116.0], [50.7, 116.0], [50.8, 116.0], [50.9, 116.0], [51.0, 116.0], [51.1, 116.0], [51.2, 116.0], [51.3, 116.0], [51.4, 116.0], [51.5, 116.0], [51.6, 117.0], [51.7, 117.0], [51.8, 117.0], [51.9, 117.0], [52.0, 117.0], [52.1, 117.0], [52.2, 117.0], [52.3, 117.0], [52.4, 117.0], [52.5, 117.0], [52.6, 117.0], [52.7, 117.0], [52.8, 117.0], [52.9, 117.0], [53.0, 117.0], [53.1, 117.0], [53.2, 117.0], [53.3, 117.0], [53.4, 117.0], [53.5, 117.0], [53.6, 117.0], [53.7, 117.0], [53.8, 117.0], [53.9, 117.0], [54.0, 117.0], [54.1, 117.0], [54.2, 117.0], [54.3, 117.0], [54.4, 117.0], [54.5, 117.0], [54.6, 117.0], [54.7, 117.0], [54.8, 117.0], [54.9, 117.0], [55.0, 117.0], [55.1, 117.0], [55.2, 117.0], [55.3, 117.0], [55.4, 117.0], [55.5, 117.0], [55.6, 117.0], [55.7, 117.0], [55.8, 117.0], [55.9, 117.0], [56.0, 117.0], [56.1, 117.0], [56.2, 117.0], [56.3, 117.0], [56.4, 117.0], [56.5, 118.0], [56.6, 118.0], [56.7, 118.0], [56.8, 118.0], [56.9, 118.0], [57.0, 118.0], [57.1, 118.0], [57.2, 118.0], [57.3, 118.0], [57.4, 118.0], [57.5, 118.0], [57.6, 118.0], [57.7, 118.0], [57.8, 118.0], [57.9, 118.0], [58.0, 118.0], [58.1, 118.0], [58.2, 118.0], [58.3, 118.0], [58.4, 118.0], [58.5, 118.0], [58.6, 118.0], [58.7, 118.0], [58.8, 118.0], [58.9, 118.0], [59.0, 118.0], [59.1, 118.0], [59.2, 118.0], [59.3, 118.0], [59.4, 118.0], [59.5, 118.0], [59.6, 118.0], [59.7, 118.0], [59.8, 118.0], [59.9, 118.0], [60.0, 118.0], [60.1, 118.0], [60.2, 118.0], [60.3, 118.0], [60.4, 118.0], [60.5, 118.0], [60.6, 118.0], [60.7, 118.0], [60.8, 118.0], [60.9, 118.0], [61.0, 118.0], [61.1, 119.0], [61.2, 119.0], [61.3, 119.0], [61.4, 119.0], [61.5, 119.0], [61.6, 119.0], [61.7, 119.0], [61.8, 119.0], [61.9, 119.0], [62.0, 119.0], [62.1, 119.0], [62.2, 119.0], [62.3, 119.0], [62.4, 119.0], [62.5, 119.0], [62.6, 119.0], [62.7, 119.0], [62.8, 119.0], [62.9, 119.0], [63.0, 119.0], [63.1, 119.0], [63.2, 119.0], [63.3, 119.0], [63.4, 119.0], [63.5, 119.0], [63.6, 119.0], [63.7, 119.0], [63.8, 119.0], [63.9, 119.0], [64.0, 119.0], [64.1, 119.0], [64.2, 119.0], [64.3, 119.0], [64.4, 119.0], [64.5, 119.0], [64.6, 119.0], [64.7, 119.0], [64.8, 119.0], [64.9, 119.0], [65.0, 119.0], [65.1, 120.0], [65.2, 120.0], [65.3, 120.0], [65.4, 120.0], [65.5, 120.0], [65.6, 120.0], [65.7, 120.0], [65.8, 120.0], [65.9, 120.0], [66.0, 120.0], [66.1, 120.0], [66.2, 120.0], [66.3, 120.0], [66.4, 120.0], [66.5, 120.0], [66.6, 120.0], [66.7, 120.0], [66.8, 120.0], [66.9, 120.0], [67.0, 120.0], [67.1, 120.0], [67.2, 120.0], [67.3, 120.0], [67.4, 120.0], [67.5, 120.0], [67.6, 120.0], [67.7, 120.0], [67.8, 120.0], [67.9, 120.0], [68.0, 120.0], [68.1, 121.0], [68.2, 121.0], [68.3, 121.0], [68.4, 121.0], [68.5, 121.0], [68.6, 121.0], [68.7, 121.0], [68.8, 121.0], [68.9, 121.0], [69.0, 121.0], [69.1, 121.0], [69.2, 121.0], [69.3, 121.0], [69.4, 121.0], [69.5, 121.0], [69.6, 121.0], [69.7, 121.0], [69.8, 121.0], [69.9, 121.0], [70.0, 121.0], [70.1, 121.0], [70.2, 121.0], [70.3, 121.0], [70.4, 121.0], [70.5, 121.0], [70.6, 121.0], [70.7, 121.0], [70.8, 121.0], [70.9, 121.0], [71.0, 122.0], [71.1, 122.0], [71.2, 122.0], [71.3, 122.0], [71.4, 122.0], [71.5, 122.0], [71.6, 122.0], [71.7, 122.0], [71.8, 122.0], [71.9, 122.0], [72.0, 122.0], [72.1, 122.0], [72.2, 122.0], [72.3, 122.0], [72.4, 122.0], [72.5, 122.0], [72.6, 122.0], [72.7, 122.0], [72.8, 122.0], [72.9, 122.0], [73.0, 122.0], [73.1, 123.0], [73.2, 123.0], [73.3, 123.0], [73.4, 123.0], [73.5, 123.0], [73.6, 123.0], [73.7, 123.0], [73.8, 123.0], [73.9, 123.0], [74.0, 123.0], [74.1, 123.0], [74.2, 123.0], [74.3, 123.0], [74.4, 123.0], [74.5, 123.0], [74.6, 123.0], [74.7, 123.0], [74.8, 123.0], [74.9, 123.0], [75.0, 124.0], [75.1, 124.0], [75.2, 124.0], [75.3, 124.0], [75.4, 124.0], [75.5, 124.0], [75.6, 124.0], [75.7, 124.0], [75.8, 124.0], [75.9, 124.0], [76.0, 124.0], [76.1, 124.0], [76.2, 124.0], [76.3, 124.0], [76.4, 124.0], [76.5, 124.0], [76.6, 124.0], [76.7, 124.0], [76.8, 125.0], [76.9, 125.0], [77.0, 125.0], [77.1, 125.0], [77.2, 125.0], [77.3, 125.0], [77.4, 125.0], [77.5, 125.0], [77.6, 125.0], [77.7, 125.0], [77.8, 125.0], [77.9, 125.0], [78.0, 125.0], [78.1, 125.0], [78.2, 126.0], [78.3, 126.0], [78.4, 126.0], [78.5, 126.0], [78.6, 126.0], [78.7, 126.0], [78.8, 126.0], [78.9, 126.0], [79.0, 126.0], [79.1, 126.0], [79.2, 126.0], [79.3, 126.0], [79.4, 126.0], [79.5, 127.0], [79.6, 127.0], [79.7, 127.0], [79.8, 127.0], [79.9, 127.0], [80.0, 127.0], [80.1, 127.0], [80.2, 127.0], [80.3, 128.0], [80.4, 128.0], [80.5, 128.0], [80.6, 128.0], [80.7, 128.0], [80.8, 128.0], [80.9, 128.0], [81.0, 129.0], [81.1, 129.0], [81.2, 129.0], [81.3, 129.0], [81.4, 129.0], [81.5, 129.0], [81.6, 129.0], [81.7, 129.0], [81.8, 130.0], [81.9, 130.0], [82.0, 130.0], [82.1, 130.0], [82.2, 130.0], [82.3, 131.0], [82.4, 131.0], [82.5, 131.0], [82.6, 131.0], [82.7, 131.0], [82.8, 132.0], [82.9, 132.0], [83.0, 132.0], [83.1, 132.0], [83.2, 132.0], [83.3, 132.0], [83.4, 132.0], [83.5, 133.0], [83.6, 133.0], [83.7, 133.0], [83.8, 134.0], [83.9, 134.0], [84.0, 134.0], [84.1, 134.0], [84.2, 134.0], [84.3, 135.0], [84.4, 135.0], [84.5, 135.0], [84.6, 136.0], [84.7, 136.0], [84.8, 136.0], [84.9, 137.0], [85.0, 137.0], [85.1, 138.0], [85.2, 138.0], [85.3, 138.0], [85.4, 139.0], [85.5, 139.0], [85.6, 140.0], [85.7, 140.0], [85.8, 141.0], [85.9, 141.0], [86.0, 142.0], [86.1, 142.0], [86.2, 143.0], [86.3, 144.0], [86.4, 145.0], [86.5, 145.0], [86.6, 147.0], [86.7, 147.0], [86.8, 148.0], [86.9, 149.0], [87.0, 152.0], [87.1, 153.0], [87.2, 154.0], [87.3, 155.0], [87.4, 156.0], [87.5, 160.0], [87.6, 164.0], [87.7, 166.0], [87.8, 183.0], [87.9, 207.0], [88.0, 261.0], [88.1, 354.0], [88.2, 361.0], [88.3, 362.0], [88.4, 364.0], [88.5, 367.0], [88.6, 368.0], [88.7, 368.0], [88.8, 368.0], [88.9, 369.0], [89.0, 370.0], [89.1, 371.0], [89.2, 371.0], [89.3, 372.0], [89.4, 372.0], [89.5, 373.0], [89.6, 373.0], [89.7, 373.0], [89.8, 375.0], [89.9, 375.0], [90.0, 375.0], [90.1, 376.0], [90.2, 376.0], [90.3, 377.0], [90.4, 379.0], [90.5, 379.0], [90.6, 379.0], [90.7, 380.0], [90.8, 381.0], [90.9, 382.0], [91.0, 383.0], [91.1, 385.0], [91.2, 385.0], [91.3, 386.0], [91.4, 387.0], [91.5, 388.0], [91.6, 389.0], [91.7, 390.0], [91.8, 392.0], [91.9, 392.0], [92.0, 394.0], [92.1, 396.0], [92.2, 397.0], [92.3, 398.0], [92.4, 399.0], [92.5, 400.0], [92.6, 402.0], [92.7, 403.0], [92.8, 404.0], [92.9, 406.0], [93.0, 408.0], [93.1, 413.0], [93.2, 414.0], [93.3, 416.0], [93.4, 420.0], [93.5, 424.0], [93.6, 623.0], [93.7, 640.0], [93.8, 1098.0], [93.9, 1100.0], [94.0, 1102.0], [94.1, 1104.0], [94.2, 1104.0], [94.3, 1106.0], [94.4, 1108.0], [94.5, 1108.0], [94.6, 1109.0], [94.7, 1110.0], [94.8, 1111.0], [94.9, 1111.0], [95.0, 1112.0], [95.1, 1113.0], [95.2, 1113.0], [95.3, 1114.0], [95.4, 1114.0], [95.5, 1115.0], [95.6, 1115.0], [95.7, 1115.0], [95.8, 1115.0], [95.9, 1116.0], [96.0, 1116.0], [96.1, 1117.0], [96.2, 1117.0], [96.3, 1118.0], [96.4, 1118.0], [96.5, 1118.0], [96.6, 1119.0], [96.7, 1119.0], [96.8, 1120.0], [96.9, 1120.0], [97.0, 1121.0], [97.1, 1121.0], [97.2, 1122.0], [97.3, 1122.0], [97.4, 1123.0], [97.5, 1123.0], [97.6, 1125.0], [97.7, 1125.0], [97.8, 1126.0], [97.9, 1126.0], [98.0, 1126.0], [98.1, 1128.0], [98.2, 1128.0], [98.3, 1129.0], [98.4, 1130.0], [98.5, 1131.0], [98.6, 1133.0], [98.7, 1133.0], [98.8, 1135.0], [98.9, 1137.0], [99.0, 1140.0], [99.1, 1144.0], [99.2, 1151.0], [99.3, 1373.0], [99.4, 1377.0], [99.5, 1391.0], [99.6, 2123.0], [99.7, 2156.0], [99.8, 2174.0], [99.9, 2424.0], [100.0, 3140.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 311.0], [0.1, 315.0], [0.2, 315.0], [0.3, 316.0], [0.4, 317.0], [0.5, 318.0], [0.6, 319.0], [0.7, 319.0], [0.8, 320.0], [0.9, 320.0], [1.0, 320.0], [1.1, 320.0], [1.2, 321.0], [1.3, 321.0], [1.4, 322.0], [1.5, 323.0], [1.6, 323.0], [1.7, 323.0], [1.8, 323.0], [1.9, 324.0], [2.0, 324.0], [2.1, 324.0], [2.2, 324.0], [2.3, 324.0], [2.4, 325.0], [2.5, 325.0], [2.6, 325.0], [2.7, 326.0], [2.8, 326.0], [2.9, 326.0], [3.0, 326.0], [3.1, 327.0], [3.2, 327.0], [3.3, 327.0], [3.4, 327.0], [3.5, 328.0], [3.6, 328.0], [3.7, 328.0], [3.8, 328.0], [3.9, 328.0], [4.0, 328.0], [4.1, 329.0], [4.2, 329.0], [4.3, 329.0], [4.4, 329.0], [4.5, 330.0], [4.6, 330.0], [4.7, 330.0], [4.8, 330.0], [4.9, 330.0], [5.0, 330.0], [5.1, 330.0], [5.2, 331.0], [5.3, 331.0], [5.4, 331.0], [5.5, 331.0], [5.6, 331.0], [5.7, 331.0], [5.8, 332.0], [5.9, 332.0], [6.0, 332.0], [6.1, 332.0], [6.2, 332.0], [6.3, 332.0], [6.4, 332.0], [6.5, 332.0], [6.6, 332.0], [6.7, 332.0], [6.8, 333.0], [6.9, 333.0], [7.0, 333.0], [7.1, 333.0], [7.2, 333.0], [7.3, 333.0], [7.4, 333.0], [7.5, 333.0], [7.6, 333.0], [7.7, 334.0], [7.8, 334.0], [7.9, 334.0], [8.0, 334.0], [8.1, 334.0], [8.2, 334.0], [8.3, 334.0], [8.4, 334.0], [8.5, 334.0], [8.6, 335.0], [8.7, 335.0], [8.8, 335.0], [8.9, 335.0], [9.0, 335.0], [9.1, 335.0], [9.2, 335.0], [9.3, 335.0], [9.4, 335.0], [9.5, 335.0], [9.6, 335.0], [9.7, 335.0], [9.8, 335.0], [9.9, 335.0], [10.0, 335.0], [10.1, 335.0], [10.2, 335.0], [10.3, 336.0], [10.4, 336.0], [10.5, 336.0], [10.6, 336.0], [10.7, 336.0], [10.8, 336.0], [10.9, 336.0], [11.0, 336.0], [11.1, 336.0], [11.2, 336.0], [11.3, 336.0], [11.4, 337.0], [11.5, 337.0], [11.6, 337.0], [11.7, 337.0], [11.8, 337.0], [11.9, 337.0], [12.0, 337.0], [12.1, 338.0], [12.2, 338.0], [12.3, 338.0], [12.4, 338.0], [12.5, 338.0], [12.6, 338.0], [12.7, 338.0], [12.8, 338.0], [12.9, 338.0], [13.0, 338.0], [13.1, 338.0], [13.2, 338.0], [13.3, 339.0], [13.4, 339.0], [13.5, 339.0], [13.6, 339.0], [13.7, 339.0], [13.8, 339.0], [13.9, 339.0], [14.0, 339.0], [14.1, 339.0], [14.2, 339.0], [14.3, 339.0], [14.4, 339.0], [14.5, 340.0], [14.6, 340.0], [14.7, 340.0], [14.8, 340.0], [14.9, 340.0], [15.0, 340.0], [15.1, 340.0], [15.2, 340.0], [15.3, 340.0], [15.4, 340.0], [15.5, 340.0], [15.6, 340.0], [15.7, 340.0], [15.8, 341.0], [15.9, 341.0], [16.0, 341.0], [16.1, 341.0], [16.2, 341.0], [16.3, 341.0], [16.4, 341.0], [16.5, 341.0], [16.6, 341.0], [16.7, 341.0], [16.8, 341.0], [16.9, 342.0], [17.0, 342.0], [17.1, 342.0], [17.2, 342.0], [17.3, 342.0], [17.4, 342.0], [17.5, 342.0], [17.6, 342.0], [17.7, 342.0], [17.8, 342.0], [17.9, 343.0], [18.0, 343.0], [18.1, 343.0], [18.2, 343.0], [18.3, 343.0], [18.4, 343.0], [18.5, 343.0], [18.6, 343.0], [18.7, 343.0], [18.8, 343.0], [18.9, 343.0], [19.0, 343.0], [19.1, 343.0], [19.2, 344.0], [19.3, 344.0], [19.4, 344.0], [19.5, 344.0], [19.6, 344.0], [19.7, 344.0], [19.8, 344.0], [19.9, 344.0], [20.0, 344.0], [20.1, 344.0], [20.2, 344.0], [20.3, 344.0], [20.4, 344.0], [20.5, 344.0], [20.6, 344.0], [20.7, 345.0], [20.8, 345.0], [20.9, 345.0], [21.0, 345.0], [21.1, 345.0], [21.2, 345.0], [21.3, 345.0], [21.4, 345.0], [21.5, 345.0], [21.6, 345.0], [21.7, 346.0], [21.8, 346.0], [21.9, 346.0], [22.0, 346.0], [22.1, 346.0], [22.2, 346.0], [22.3, 346.0], [22.4, 346.0], [22.5, 346.0], [22.6, 346.0], [22.7, 346.0], [22.8, 347.0], [22.9, 347.0], [23.0, 347.0], [23.1, 347.0], [23.2, 347.0], [23.3, 347.0], [23.4, 347.0], [23.5, 347.0], [23.6, 347.0], [23.7, 347.0], [23.8, 347.0], [23.9, 347.0], [24.0, 347.0], [24.1, 347.0], [24.2, 347.0], [24.3, 348.0], [24.4, 348.0], [24.5, 348.0], [24.6, 348.0], [24.7, 348.0], [24.8, 348.0], [24.9, 348.0], [25.0, 348.0], [25.1, 348.0], [25.2, 348.0], [25.3, 348.0], [25.4, 348.0], [25.5, 348.0], [25.6, 348.0], [25.7, 348.0], [25.8, 348.0], [25.9, 349.0], [26.0, 349.0], [26.1, 349.0], [26.2, 349.0], [26.3, 349.0], [26.4, 349.0], [26.5, 349.0], [26.6, 349.0], [26.7, 349.0], [26.8, 349.0], [26.9, 349.0], [27.0, 349.0], [27.1, 349.0], [27.2, 349.0], [27.3, 349.0], [27.4, 350.0], [27.5, 350.0], [27.6, 350.0], [27.7, 350.0], [27.8, 350.0], [27.9, 350.0], [28.0, 350.0], [28.1, 350.0], [28.2, 350.0], [28.3, 350.0], [28.4, 350.0], [28.5, 351.0], [28.6, 351.0], [28.7, 351.0], [28.8, 351.0], [28.9, 351.0], [29.0, 351.0], [29.1, 351.0], [29.2, 351.0], [29.3, 351.0], [29.4, 351.0], [29.5, 351.0], [29.6, 352.0], [29.7, 352.0], [29.8, 352.0], [29.9, 352.0], [30.0, 352.0], [30.1, 352.0], [30.2, 352.0], [30.3, 352.0], [30.4, 352.0], [30.5, 352.0], [30.6, 352.0], [30.7, 352.0], [30.8, 353.0], [30.9, 353.0], [31.0, 353.0], [31.1, 353.0], [31.2, 353.0], [31.3, 353.0], [31.4, 353.0], [31.5, 353.0], [31.6, 353.0], [31.7, 353.0], [31.8, 353.0], [31.9, 353.0], [32.0, 353.0], [32.1, 353.0], [32.2, 353.0], [32.3, 353.0], [32.4, 354.0], [32.5, 354.0], [32.6, 354.0], [32.7, 354.0], [32.8, 354.0], [32.9, 354.0], [33.0, 354.0], [33.1, 354.0], [33.2, 354.0], [33.3, 354.0], [33.4, 354.0], [33.5, 354.0], [33.6, 355.0], [33.7, 355.0], [33.8, 355.0], [33.9, 355.0], [34.0, 355.0], [34.1, 355.0], [34.2, 355.0], [34.3, 355.0], [34.4, 355.0], [34.5, 355.0], [34.6, 355.0], [34.7, 356.0], [34.8, 356.0], [34.9, 356.0], [35.0, 356.0], [35.1, 356.0], [35.2, 356.0], [35.3, 356.0], [35.4, 356.0], [35.5, 356.0], [35.6, 356.0], [35.7, 356.0], [35.8, 356.0], [35.9, 356.0], [36.0, 356.0], [36.1, 356.0], [36.2, 357.0], [36.3, 357.0], [36.4, 357.0], [36.5, 357.0], [36.6, 357.0], [36.7, 357.0], [36.8, 357.0], [36.9, 357.0], [37.0, 357.0], [37.1, 357.0], [37.2, 357.0], [37.3, 358.0], [37.4, 358.0], [37.5, 358.0], [37.6, 358.0], [37.7, 358.0], [37.8, 358.0], [37.9, 358.0], [38.0, 358.0], [38.1, 358.0], [38.2, 358.0], [38.3, 358.0], [38.4, 358.0], [38.5, 359.0], [38.6, 359.0], [38.7, 359.0], [38.8, 359.0], [38.9, 359.0], [39.0, 359.0], [39.1, 359.0], [39.2, 359.0], [39.3, 359.0], [39.4, 359.0], [39.5, 359.0], [39.6, 360.0], [39.7, 360.0], [39.8, 360.0], [39.9, 360.0], [40.0, 360.0], [40.1, 360.0], [40.2, 360.0], [40.3, 360.0], [40.4, 360.0], [40.5, 361.0], [40.6, 361.0], [40.7, 361.0], [40.8, 361.0], [40.9, 361.0], [41.0, 361.0], [41.1, 361.0], [41.2, 361.0], [41.3, 361.0], [41.4, 361.0], [41.5, 362.0], [41.6, 362.0], [41.7, 362.0], [41.8, 362.0], [41.9, 362.0], [42.0, 362.0], [42.1, 362.0], [42.2, 362.0], [42.3, 363.0], [42.4, 363.0], [42.5, 363.0], [42.6, 363.0], [42.7, 363.0], [42.8, 363.0], [42.9, 363.0], [43.0, 363.0], [43.1, 363.0], [43.2, 364.0], [43.3, 364.0], [43.4, 364.0], [43.5, 364.0], [43.6, 364.0], [43.7, 364.0], [43.8, 364.0], [43.9, 364.0], [44.0, 365.0], [44.1, 365.0], [44.2, 365.0], [44.3, 365.0], [44.4, 365.0], [44.5, 365.0], [44.6, 365.0], [44.7, 365.0], [44.8, 366.0], [44.9, 366.0], [45.0, 366.0], [45.1, 366.0], [45.2, 366.0], [45.3, 366.0], [45.4, 366.0], [45.5, 366.0], [45.6, 366.0], [45.7, 367.0], [45.8, 367.0], [45.9, 367.0], [46.0, 367.0], [46.1, 367.0], [46.2, 367.0], [46.3, 368.0], [46.4, 368.0], [46.5, 368.0], [46.6, 368.0], [46.7, 368.0], [46.8, 368.0], [46.9, 368.0], [47.0, 369.0], [47.1, 369.0], [47.2, 369.0], [47.3, 369.0], [47.4, 369.0], [47.5, 369.0], [47.6, 370.0], [47.7, 370.0], [47.8, 370.0], [47.9, 370.0], [48.0, 370.0], [48.1, 370.0], [48.2, 371.0], [48.3, 371.0], [48.4, 371.0], [48.5, 371.0], [48.6, 371.0], [48.7, 371.0], [48.8, 371.0], [48.9, 372.0], [49.0, 372.0], [49.1, 372.0], [49.2, 372.0], [49.3, 372.0], [49.4, 373.0], [49.5, 373.0], [49.6, 373.0], [49.7, 373.0], [49.8, 373.0], [49.9, 374.0], [50.0, 374.0], [50.1, 374.0], [50.2, 374.0], [50.3, 374.0], [50.4, 374.0], [50.5, 375.0], [50.6, 375.0], [50.7, 375.0], [50.8, 375.0], [50.9, 376.0], [51.0, 376.0], [51.1, 376.0], [51.2, 377.0], [51.3, 377.0], [51.4, 378.0], [51.5, 378.0], [51.6, 378.0], [51.7, 378.0], [51.8, 379.0], [51.9, 379.0], [52.0, 380.0], [52.1, 380.0], [52.2, 380.0], [52.3, 381.0], [52.4, 381.0], [52.5, 382.0], [52.6, 382.0], [52.7, 383.0], [52.8, 383.0], [52.9, 383.0], [53.0, 384.0], [53.1, 384.0], [53.2, 384.0], [53.3, 384.0], [53.4, 385.0], [53.5, 385.0], [53.6, 386.0], [53.7, 386.0], [53.8, 387.0], [53.9, 387.0], [54.0, 388.0], [54.1, 388.0], [54.2, 389.0], [54.3, 389.0], [54.4, 389.0], [54.5, 390.0], [54.6, 390.0], [54.7, 391.0], [54.8, 392.0], [54.9, 392.0], [55.0, 393.0], [55.1, 394.0], [55.2, 395.0], [55.3, 396.0], [55.4, 397.0], [55.5, 397.0], [55.6, 398.0], [55.7, 399.0], [55.8, 399.0], [55.9, 400.0], [56.0, 401.0], [56.1, 403.0], [56.2, 404.0], [56.3, 406.0], [56.4, 408.0], [56.5, 408.0], [56.6, 409.0], [56.7, 410.0], [56.8, 410.0], [56.9, 411.0], [57.0, 412.0], [57.1, 413.0], [57.2, 415.0], [57.3, 416.0], [57.4, 417.0], [57.5, 418.0], [57.6, 420.0], [57.7, 421.0], [57.8, 421.0], [57.9, 421.0], [58.0, 423.0], [58.1, 424.0], [58.2, 425.0], [58.3, 427.0], [58.4, 429.0], [58.5, 430.0], [58.6, 432.0], [58.7, 433.0], [58.8, 434.0], [58.9, 435.0], [59.0, 436.0], [59.1, 437.0], [59.2, 438.0], [59.3, 440.0], [59.4, 440.0], [59.5, 442.0], [59.6, 443.0], [59.7, 447.0], [59.8, 448.0], [59.9, 451.0], [60.0, 453.0], [60.1, 460.0], [60.2, 470.0], [60.3, 489.0], [60.4, 502.0], [60.5, 510.0], [60.6, 568.0], [60.7, 570.0], [60.8, 573.0], [60.9, 577.0], [61.0, 578.0], [61.1, 580.0], [61.2, 581.0], [61.3, 582.0], [61.4, 583.0], [61.5, 584.0], [61.6, 585.0], [61.7, 586.0], [61.8, 587.0], [61.9, 588.0], [62.0, 589.0], [62.1, 590.0], [62.2, 591.0], [62.3, 591.0], [62.4, 592.0], [62.5, 593.0], [62.6, 594.0], [62.7, 594.0], [62.8, 595.0], [62.9, 595.0], [63.0, 596.0], [63.1, 596.0], [63.2, 596.0], [63.3, 596.0], [63.4, 597.0], [63.5, 597.0], [63.6, 597.0], [63.7, 598.0], [63.8, 599.0], [63.9, 600.0], [64.0, 601.0], [64.1, 601.0], [64.2, 601.0], [64.3, 602.0], [64.4, 602.0], [64.5, 603.0], [64.6, 603.0], [64.7, 604.0], [64.8, 604.0], [64.9, 605.0], [65.0, 605.0], [65.1, 606.0], [65.2, 606.0], [65.3, 607.0], [65.4, 607.0], [65.5, 608.0], [65.6, 608.0], [65.7, 608.0], [65.8, 609.0], [65.9, 609.0], [66.0, 609.0], [66.1, 609.0], [66.2, 610.0], [66.3, 610.0], [66.4, 611.0], [66.5, 611.0], [66.6, 611.0], [66.7, 611.0], [66.8, 612.0], [66.9, 612.0], [67.0, 613.0], [67.1, 613.0], [67.2, 613.0], [67.3, 614.0], [67.4, 614.0], [67.5, 614.0], [67.6, 615.0], [67.7, 615.0], [67.8, 615.0], [67.9, 616.0], [68.0, 616.0], [68.1, 616.0], [68.2, 616.0], [68.3, 617.0], [68.4, 617.0], [68.5, 617.0], [68.6, 617.0], [68.7, 618.0], [68.8, 618.0], [68.9, 619.0], [69.0, 619.0], [69.1, 619.0], [69.2, 620.0], [69.3, 620.0], [69.4, 620.0], [69.5, 620.0], [69.6, 621.0], [69.7, 621.0], [69.8, 622.0], [69.9, 622.0], [70.0, 622.0], [70.1, 622.0], [70.2, 622.0], [70.3, 623.0], [70.4, 623.0], [70.5, 623.0], [70.6, 623.0], [70.7, 623.0], [70.8, 624.0], [70.9, 624.0], [71.0, 624.0], [71.1, 624.0], [71.2, 624.0], [71.3, 625.0], [71.4, 625.0], [71.5, 625.0], [71.6, 626.0], [71.7, 626.0], [71.8, 626.0], [71.9, 627.0], [72.0, 627.0], [72.1, 627.0], [72.2, 628.0], [72.3, 628.0], [72.4, 629.0], [72.5, 629.0], [72.6, 629.0], [72.7, 630.0], [72.8, 631.0], [72.9, 631.0], [73.0, 631.0], [73.1, 631.0], [73.2, 632.0], [73.3, 633.0], [73.4, 633.0], [73.5, 634.0], [73.6, 634.0], [73.7, 635.0], [73.8, 636.0], [73.9, 636.0], [74.0, 637.0], [74.1, 637.0], [74.2, 638.0], [74.3, 638.0], [74.4, 638.0], [74.5, 638.0], [74.6, 639.0], [74.7, 639.0], [74.8, 639.0], [74.9, 640.0], [75.0, 640.0], [75.1, 641.0], [75.2, 642.0], [75.3, 643.0], [75.4, 643.0], [75.5, 644.0], [75.6, 645.0], [75.7, 645.0], [75.8, 646.0], [75.9, 646.0], [76.0, 647.0], [76.1, 648.0], [76.2, 648.0], [76.3, 649.0], [76.4, 650.0], [76.5, 650.0], [76.6, 651.0], [76.7, 651.0], [76.8, 653.0], [76.9, 654.0], [77.0, 655.0], [77.1, 655.0], [77.2, 656.0], [77.3, 657.0], [77.4, 659.0], [77.5, 660.0], [77.6, 660.0], [77.7, 661.0], [77.8, 662.0], [77.9, 663.0], [78.0, 663.0], [78.1, 664.0], [78.2, 665.0], [78.3, 666.0], [78.4, 667.0], [78.5, 667.0], [78.6, 669.0], [78.7, 669.0], [78.8, 670.0], [78.9, 671.0], [79.0, 671.0], [79.1, 672.0], [79.2, 673.0], [79.3, 673.0], [79.4, 674.0], [79.5, 676.0], [79.6, 677.0], [79.7, 678.0], [79.8, 679.0], [79.9, 680.0], [80.0, 681.0], [80.1, 681.0], [80.2, 683.0], [80.3, 684.0], [80.4, 685.0], [80.5, 686.0], [80.6, 687.0], [80.7, 689.0], [80.8, 689.0], [80.9, 691.0], [81.0, 692.0], [81.1, 694.0], [81.2, 695.0], [81.3, 697.0], [81.4, 698.0], [81.5, 700.0], [81.6, 702.0], [81.7, 703.0], [81.8, 707.0], [81.9, 709.0], [82.0, 710.0], [82.1, 713.0], [82.2, 716.0], [82.3, 718.0], [82.4, 719.0], [82.5, 721.0], [82.6, 725.0], [82.7, 728.0], [82.8, 734.0], [82.9, 738.0], [83.0, 743.0], [83.1, 747.0], [83.2, 756.0], [83.3, 768.0], [83.4, 802.0], [83.5, 837.0], [83.6, 857.0], [83.7, 865.0], [83.8, 870.0], [83.9, 874.0], [84.0, 877.0], [84.1, 878.0], [84.2, 884.0], [84.3, 888.0], [84.4, 891.0], [84.5, 895.0], [84.6, 896.0], [84.7, 898.0], [84.8, 901.0], [84.9, 908.0], [85.0, 913.0], [85.1, 917.0], [85.2, 919.0], [85.3, 922.0], [85.4, 926.0], [85.5, 929.0], [85.6, 937.0], [85.7, 942.0], [85.8, 947.0], [85.9, 954.0], [86.0, 957.0], [86.1, 961.0], [86.2, 967.0], [86.3, 973.0], [86.4, 981.0], [86.5, 991.0], [86.6, 1000.0], [86.7, 1007.0], [86.8, 1053.0], [86.9, 1130.0], [87.0, 1151.0], [87.1, 1174.0], [87.2, 1219.0], [87.3, 1310.0], [87.4, 1322.0], [87.5, 1323.0], [87.6, 1326.0], [87.7, 1328.0], [87.8, 1330.0], [87.9, 1331.0], [88.0, 1333.0], [88.1, 1334.0], [88.2, 1336.0], [88.3, 1337.0], [88.4, 1338.0], [88.5, 1338.0], [88.6, 1339.0], [88.7, 1340.0], [88.8, 1341.0], [88.9, 1341.0], [89.0, 1342.0], [89.1, 1343.0], [89.2, 1343.0], [89.3, 1344.0], [89.4, 1344.0], [89.5, 1344.0], [89.6, 1346.0], [89.7, 1346.0], [89.8, 1347.0], [89.9, 1347.0], [90.0, 1348.0], [90.1, 1349.0], [90.2, 1350.0], [90.3, 1351.0], [90.4, 1351.0], [90.5, 1352.0], [90.6, 1353.0], [90.7, 1353.0], [90.8, 1354.0], [90.9, 1355.0], [91.0, 1356.0], [91.1, 1356.0], [91.2, 1357.0], [91.3, 1357.0], [91.4, 1358.0], [91.5, 1358.0], [91.6, 1359.0], [91.7, 1359.0], [91.8, 1360.0], [91.9, 1361.0], [92.0, 1361.0], [92.1, 1362.0], [92.2, 1362.0], [92.3, 1363.0], [92.4, 1364.0], [92.5, 1366.0], [92.6, 1367.0], [92.7, 1367.0], [92.8, 1368.0], [92.9, 1369.0], [93.0, 1370.0], [93.1, 1371.0], [93.2, 1372.0], [93.3, 1374.0], [93.4, 1375.0], [93.5, 1376.0], [93.6, 1377.0], [93.7, 1378.0], [93.8, 1379.0], [93.9, 1383.0], [94.0, 1386.0], [94.1, 1388.0], [94.2, 1390.0], [94.3, 1391.0], [94.4, 1393.0], [94.5, 1400.0], [94.6, 1404.0], [94.7, 1410.0], [94.8, 1415.0], [94.9, 1422.0], [95.0, 1431.0], [95.1, 1439.0], [95.2, 1456.0], [95.3, 1510.0], [95.4, 1594.0], [95.5, 1597.0], [95.6, 1601.0], [95.7, 1603.0], [95.8, 1605.0], [95.9, 1609.0], [96.0, 1611.0], [96.1, 1615.0], [96.2, 1617.0], [96.3, 1619.0], [96.4, 1622.0], [96.5, 1624.0], [96.6, 1628.0], [96.7, 1630.0], [96.8, 1634.0], [96.9, 1636.0], [97.0, 1641.0], [97.1, 1646.0], [97.2, 1653.0], [97.3, 1654.0], [97.4, 1660.0], [97.5, 1663.0], [97.6, 1669.0], [97.7, 1691.0], [97.8, 1697.0], [97.9, 1714.0], [98.0, 1723.0], [98.1, 1735.0], [98.2, 1767.0], [98.3, 1865.0], [98.4, 1911.0], [98.5, 1925.0], [98.6, 1950.0], [98.7, 1977.0], [98.8, 2310.0], [98.9, 2348.0], [99.0, 2357.0], [99.1, 2369.0], [99.2, 2389.0], [99.3, 2412.0], [99.4, 2432.0], [99.5, 2485.0], [99.6, 2668.0], [99.7, 2741.0], [99.8, 3260.0], [99.9, 3609.0], [100.0, 3870.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 3468.0, "series": [{"data": [[2100.0, 1.0], [2300.0, 5.0], [2200.0, 5.0], [600.0, 53.0], [2600.0, 1.0], [700.0, 40.0], [2700.0, 2.0], [200.0, 2577.0], [800.0, 55.0], [3200.0, 1.0], [3500.0, 1.0], [900.0, 5.0], [1000.0, 7.0], [1100.0, 4.0], [300.0, 130.0], [1200.0, 183.0], [1300.0, 10.0], [1400.0, 14.0], [1500.0, 35.0], [400.0, 257.0], [1600.0, 6.0], [1700.0, 2.0], [1800.0, 6.0], [500.0, 546.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[2100.0, 13.0], [1100.0, 213.0], [300.0, 174.0], [600.0, 7.0], [2400.0, 1.0], [1300.0, 9.0], [1400.0, 2.0], [3100.0, 3.0], [100.0, 3468.0], [200.0, 6.0], [400.0, 45.0], [1000.0, 5.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[600.0, 694.0], [700.0, 76.0], [800.0, 56.0], [900.0, 71.0], [1000.0, 11.0], [1100.0, 10.0], [1200.0, 5.0], [1300.0, 285.0], [1400.0, 32.0], [1500.0, 10.0], [1600.0, 92.0], [1700.0, 15.0], [1800.0, 5.0], [1900.0, 13.0], [2100.0, 1.0], [2300.0, 17.0], [2200.0, 2.0], [2400.0, 12.0], [2600.0, 7.0], [2700.0, 2.0], [2800.0, 1.0], [2900.0, 1.0], [3200.0, 1.0], [3300.0, 3.0], [3600.0, 3.0], [3800.0, 1.0], [300.0, 2203.0], [400.0, 178.0], [500.0, 139.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 267.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 9049.0, "series": [{"data": [[0.0, 9049.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2522.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 267.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.946428571428575, "minX": 1.63245582E12, "maxY": 38.259282624369106, "series": [{"data": [[1.63245594E12, 14.650579150579178], [1.63245582E12, 8.946428571428575], [1.63245588E12, 38.259282624369106]], "isOverall": false, "label": "advancedThreadGroup", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63245594E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 116.66666666666666, "minX": 1.0, "maxY": 746.7058823529412, "series": [{"data": [[32.0, 384.235294117647], [33.0, 396.42857142857144], [2.0, 232.0], [34.0, 395.1], [35.0, 308.5405405405405], [36.0, 368.24137931034494], [37.0, 452.2051282051281], [38.0, 489.62068965517244], [39.0, 413.98701298701286], [40.0, 404.26493762311253], [3.0, 458.12499999999994], [4.0, 540.0], [5.0, 329.6363636363636], [6.0, 346.3529411764706], [7.0, 312.29999999999995], [8.0, 316.30000000000007], [9.0, 292.6363636363636], [10.0, 359.72222222222223], [11.0, 335.5], [12.0, 427.875], [13.0, 363.79999999999995], [14.0, 371.09090909090907], [15.0, 337.06250000000006], [16.0, 421.3939393939394], [1.0, 484.0], [17.0, 333.31578947368416], [18.0, 385.54545454545456], [19.0, 357.7083333333333], [20.0, 304.4736842105263], [21.0, 305.1071428571428], [22.0, 355.8125], [23.0, 271.88888888888886], [24.0, 496.7222222222223], [25.0, 372.7142857142857], [26.0, 498.6470588235293], [27.0, 454.66666666666674], [28.0, 340.2857142857143], [29.0, 423.5333333333333], [30.0, 364.19047619047615], [31.0, 407.06249999999994]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[36.67156614292952, 399.340091231626]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[32.0, 237.0588235294118], [33.0, 204.78571428571433], [2.0, 117.66666666666667], [34.0, 266.8333333333333], [35.0, 238.6486486486486], [36.0, 229.4137931034482], [37.0, 249.92307692307685], [38.0, 168.72413793103448], [39.0, 246.8441558441559], [40.0, 199.2856204858835], [3.0, 179.24999999999997], [4.0, 139.75], [5.0, 126.81818181818181], [6.0, 136.64705882352942], [7.0, 149.5], [8.0, 181.80000000000004], [9.0, 365.40909090909093], [10.0, 132.0], [11.0, 149.2], [12.0, 239.99999999999997], [13.0, 140.6], [14.0, 361.6363636363637], [15.0, 248.25], [16.0, 155.45454545454547], [1.0, 118.0], [17.0, 119.63157894736844], [18.0, 134.09090909090907], [19.0, 138.16666666666663], [20.0, 240.00000000000003], [21.0, 173.78571428571425], [22.0, 175.9375], [23.0, 116.66666666666666], [24.0, 247.16666666666666], [25.0, 232.08571428571426], [26.0, 247.94117647058823], [27.0, 177.83333333333334], [28.0, 140.85714285714286], [29.0, 118.16666666666669], [30.0, 208.8571428571429], [31.0, 212.82812500000003]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[36.67156614292952, 200.25418144956902]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[32.0, 621.4705882352941], [33.0, 601.2857142857142], [2.0, 350.0], [34.0, 662.0], [35.0, 547.3513513513514], [36.0, 597.7758620689656], [37.0, 702.2564102564104], [38.0, 658.3793103448277], [39.0, 660.9220779220777], [40.0, 603.6198292843063], [3.0, 637.875], [4.0, 680.0], [5.0, 456.6363636363637], [6.0, 483.23529411764713], [7.0, 462.0], [8.0, 498.09999999999997], [9.0, 658.090909090909], [10.0, 491.8333333333333], [11.0, 484.9000000000001], [12.0, 668.1249999999999], [13.0, 504.6], [14.0, 732.909090909091], [15.0, 585.4999999999999], [16.0, 576.969696969697], [1.0, 603.0], [17.0, 453.2105263157895], [18.0, 519.7727272727274], [19.0, 496.0833333333332], [20.0, 544.4736842105264], [21.0, 479.0357142857143], [22.0, 531.9374999999999], [23.0, 388.61111111111103], [24.0, 744.1666666666667], [25.0, 604.8285714285714], [26.0, 746.7058823529412], [27.0, 632.7777777777778], [28.0, 481.2857142857144], [29.0, 541.8], [30.0, 573.0952380952382], [31.0, 619.96875]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[36.67156614292952, 599.6768879878352]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 40.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 641.3333333333334, "minX": 1.63245582E12, "maxY": 328022.63333333336, "series": [{"data": [[1.63245594E12, 15659.433333333332], [1.63245582E12, 6485.866666666667], [1.63245588E12, 328022.63333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63245594E12, 1510.1666666666667], [1.63245582E12, 641.3333333333334], [1.63245588E12, 32047.166666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63245594E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 167.48749999999995, "minX": 1.63245582E12, "maxY": 602.756968876861, "series": [{"data": [[1.63245594E12, 376.5251396648046], [1.63245582E12, 334.11111111111103], [1.63245588E12, 401.7163734776722]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.63245594E12, 200.875], [1.63245582E12, 167.48749999999995], [1.63245588E12, 200.93470048569893]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.63245594E12, 573.9720670391063], [1.63245582E12, 505.513888888889], [1.63245588E12, 602.756968876861]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63245594E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 167.46249999999998, "minX": 1.63245582E12, "maxY": 399.74830852503493, "series": [{"data": [[1.63245594E12, 372.5418994413408], [1.63245582E12, 333.8750000000001], [1.63245588E12, 399.74830852503493]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.63245594E12, 200.875], [1.63245582E12, 167.46249999999998], [1.63245588E12, 200.93227199136533]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.63245594E12, 197.39106145251398], [1.63245582E12, 171.09722222222217], [1.63245588E12, 200.95805142083898]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63245594E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 80.62500000000004, "minX": 1.63245582E12, "maxY": 321.0484438430307, "series": [{"data": [[1.63245594E12, 294.24581005586566], [1.63245582E12, 256.58333333333337], [1.63245588E12, 321.0484438430307]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.63245594E12, 115.74374999999999], [1.63245582E12, 80.62500000000004], [1.63245588E12, 121.88424177010235]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.63245594E12, 114.67597765363138], [1.63245582E12, 83.63888888888891], [1.63245588E12, 121.81948579161065]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63245594E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 100.0, "minX": 1.63245582E12, "maxY": 3870.0, "series": [{"data": [[1.63245594E12, 3354.0], [1.63245582E12, 1432.0], [1.63245588E12, 3870.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63245594E12, 101.0], [1.63245582E12, 104.0], [1.63245588E12, 100.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63245594E12, 683.8000000000002], [1.63245582E12, 623.5], [1.63245588E12, 884.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63245594E12, 2207.629999999977], [1.63245582E12, 1397.25], [1.63245588E12, 1735.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63245594E12, 1227.2499999999989], [1.63245582E12, 917.5], [1.63245588E12, 1334.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63245594E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 168.0, "minX": 2.0, "maxY": 543.5, "series": [{"data": [[2.0, 543.5], [3.0, 168.0], [22.0, 240.5], [24.0, 288.0], [29.0, 303.0], [39.0, 261.0], [38.0, 258.0], [42.0, 241.0], [52.0, 282.5], [56.0, 264.0], [58.0, 260.5], [62.0, 307.0], [64.0, 254.5], [78.0, 272.0], [100.0, 309.0], [111.0, 255.0], [108.0, 252.5], [128.0, 264.5], [129.0, 276.0], [131.0, 317.0], [139.0, 294.0], [137.0, 263.0], [155.0, 326.0], [163.0, 283.0], [170.0, 244.0], [168.0, 305.0], [177.0, 316.0], [179.0, 253.0], [183.0, 345.0], [181.0, 330.0], [190.0, 253.0], [184.0, 327.0], [185.0, 308.5], [186.0, 322.5], [192.0, 271.0], [194.0, 251.0], [193.0, 314.0], [199.0, 315.0], [196.0, 265.5], [197.0, 323.0], [195.0, 334.0], [198.0, 250.0], [204.0, 266.5], [201.0, 294.5], [202.0, 320.0], [205.0, 252.0], [206.0, 255.5], [203.0, 265.0], [214.0, 264.0], [213.0, 250.0], [209.0, 245.0], [211.0, 251.0], [215.0, 321.0], [210.0, 328.0], [218.0, 248.0], [224.0, 263.5], [242.0, 249.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 242.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 117.0, "minX": 2.0, "maxY": 301.0, "series": [{"data": [[2.0, 301.0], [3.0, 168.0], [22.0, 129.0], [24.0, 161.5], [29.0, 124.0], [39.0, 132.0], [38.0, 124.0], [42.0, 142.0], [52.0, 143.0], [56.0, 127.0], [58.0, 155.0], [62.0, 120.5], [64.0, 134.0], [78.0, 128.0], [100.0, 131.0], [111.0, 130.0], [108.0, 129.0], [128.0, 132.0], [129.0, 129.0], [131.0, 123.0], [139.0, 130.0], [137.0, 125.0], [155.0, 125.0], [163.0, 120.0], [170.0, 125.0], [168.0, 121.0], [177.0, 124.0], [179.0, 117.0], [183.0, 124.0], [181.0, 125.0], [190.0, 122.0], [184.0, 125.0], [185.0, 123.0], [186.0, 122.0], [192.0, 123.0], [194.0, 121.0], [193.0, 120.0], [199.0, 120.0], [196.0, 122.0], [197.0, 122.0], [195.0, 122.0], [198.0, 118.5], [204.0, 121.0], [201.0, 121.0], [202.0, 125.0], [205.0, 125.0], [206.0, 125.5], [203.0, 125.0], [214.0, 137.0], [213.0, 121.0], [209.0, 120.0], [211.0, 120.0], [215.0, 120.0], [210.0, 121.0], [218.0, 121.0], [224.0, 121.0], [242.0, 121.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 242.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.166666666666667, "minX": 1.63245582E12, "maxY": 185.33333333333334, "series": [{"data": [[1.63245594E12, 7.8], [1.63245582E12, 4.166666666666667], [1.63245588E12, 185.33333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63245594E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.63245582E12, "maxY": 123.16666666666667, "series": [{"data": [[1.63245594E12, 5.966666666666667], [1.63245582E12, 2.4], [1.63245588E12, 123.16666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63245594E12, 2.6666666666666665], [1.63245582E12, 1.3333333333333333], [1.63245588E12, 61.766666666666666]], "isOverall": false, "label": "301", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63245594E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.2, "minX": 1.63245582E12, "maxY": 61.766666666666666, "series": [{"data": [[1.63245594E12, 2.9833333333333334], [1.63245582E12, 1.2], [1.63245588E12, 61.583333333333336]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.63245594E12, 2.6666666666666665], [1.63245582E12, 1.3333333333333333], [1.63245588E12, 61.766666666666666]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.63245594E12, 2.9833333333333334], [1.63245582E12, 1.2], [1.63245588E12, 61.583333333333336]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63245594E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.7333333333333334, "minX": 1.63245582E12, "maxY": 184.93333333333334, "series": [{"data": [[1.63245594E12, 8.633333333333333], [1.63245582E12, 3.7333333333333334], [1.63245588E12, 184.93333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63245594E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

